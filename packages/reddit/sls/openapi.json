{
  "openapi": "3.0.1",
  "info": {
    "title": "Reddit TypeScript SDK API",
    "version": "1.0.0",
    "description": "Single entry-point API for all Reddit TypeScript SDK functions via a wrapper Lambda",
    "contact": {
      "name": "Microfox Dev Support",
      "email": "support@microfox.com"
    }
  },
  "servers": [
    {
      "url": "https://api.microfox.com/c/reddit",
      "description": "Unified wrapper endpoint"
    }
  ],
  "paths": {
    "/validateAccessToken": {
      "post": {
        "operationId": "validateAccessToken",
        "summary": "Validates the current access token.",
        "description": "This function checks if the current access token is valid. It performs a validation check on the access token associated with the current session or user. The function returns a boolean value indicating the token's validity.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the validateAccessToken sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean",
                      "description": "Indicates whether the access token is valid"
                    }
                  },
                  "required": [
                    "isValid"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No valid access token provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/refreshAccessToken": {
      "post": {
        "operationId": "refreshAccessToken",
        "summary": "Refreshes the access token using a refresh token.",
        "description": "This function obtains a new access token using the provided refresh token. It is typically used when the current access token has expired or is about to expire, allowing continued access to protected resources without requiring the user to re-authenticate.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the refreshAccessToken sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The refresh token obtained during initial authorization.",
                            "name": "refreshToken"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "The new access token"
                    },
                    "expiresIn": {
                      "type": "integer",
                      "description": "The number of seconds until the new access token expires"
                    }
                  },
                  "required": [
                    "accessToken",
                    "expiresIn"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - refresh token has expired or is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/getMe": {
      "post": {
        "operationId": "getMe",
        "summary": "Retrieves information about the currently authenticated user.",
        "description": "This function fetches the user data for the authenticated user. It requires no parameters and returns an object containing the user's information. This is useful for getting details about the current user's account, profile, or session.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getMe sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the user"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The email address of the user"
                    },
                    "name": {
                      "type": "string",
                      "description": "The full name of the user"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the user account was created"
                    }
                  },
                  "required": [
                    "id",
                    "username",
                    "email"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUserPreferences": {
      "post": {
        "operationId": "getUserPreferences",
        "summary": "Retrieves the preferences of the currently authenticated user.",
        "description": "This function fetches the user's preferences without requiring any input parameters. It returns an object containing various preference settings for the authenticated user. The function is useful for personalizing the user experience or applying user-specific configurations in the application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserPreferences sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "An object containing the user's preferences"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updateUserPreferences": {
      "post": {
        "operationId": "updateUserPreferences",
        "summary": "Updates the preferences of the currently authenticated user.",
        "description": "This function modifies the user's preferences by accepting a record of new preference settings. It allows users to customize their experience by updating various preference options. The function returns an object containing the updated preferences after the changes have been applied.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the updateUserPreferences sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "An object containing the new preferences",
                            "properties": {
                              "prefs": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "unknown"
                                },
                                "description": "Record of preference key-value pairs"
                              }
                            },
                            "required": [
                              "prefs"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "unknown"
                  },
                  "description": "Record containing the updated preferences"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUserKarma": {
      "post": {
        "operationId": "getUserKarma",
        "summary": "Retrieves the karma breakdown for the currently authenticated user.",
        "description": "This function fetches the user's karma information, including both link and comment karma. It returns a record object containing the karma breakdown for the authenticated user. No parameters are required as it uses the current authentication context.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserKarma sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user's karma breakdown",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "link_karma": {
                        "type": "number",
                        "description": "The user's karma from submitted links"
                      },
                      "comment_karma": {
                        "type": "number",
                        "description": "The user's karma from submitted comments"
                      }
                    },
                    "required": [
                      "link_karma",
                      "comment_karma"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUserTrophies": {
      "post": {
        "operationId": "getUserTrophies",
        "summary": "Retrieves the trophies for the currently authenticated user.",
        "description": "This function fetches the trophies associated with the authenticated user's account. It does not require any input parameters and returns an object representing the user's trophies. The function is useful for displaying a user's achievements or rewards within an application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserTrophies sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response containing the user's trophies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object representing the user's trophies",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUser": {
      "post": {
        "operationId": "getUser",
        "summary": "Retrieves information about a specific user.",
        "description": "This function fetches user data for a specified username. It allows retrieving detailed information about a user account. The function takes a single parameter, the username, and returns an object containing the user's information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The username of the user to retrieve."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The username of the user"
                    },
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the user"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the user"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when the user account was created"
                    }
                  },
                  "required": [
                    "username",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid username format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating user not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUserContent": {
      "post": {
        "operationId": "getUserContent",
        "summary": "Retrieves content (posts and comments) submitted by a specific user.",
        "description": "This function fetches user-generated content, including posts and comments, based on the specified section. It allows for filtering and sorting of results through optional parameters, providing flexibility in content retrieval. The function returns an array of posts and comments submitted by the user, enabling detailed analysis of a user's Reddit activity.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserContent sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The username of the user whose content to retrieve."
                          },
                          {
                            "type": "string",
                            "enum": [
                              "overview",
                              "submitted",
                              "comments",
                              "upvoted",
                              "downvoted",
                              "hidden",
                              "saved",
                              "gilded"
                            ],
                            "description": "The section of content to retrieve."
                          },
                          {
                            "type": "object",
                            "description": "Optional parameters for filtering and sorting the results.",
                            "properties": {
                              "after": {
                                "type": "string",
                                "description": "The full name of a thing to fetch after."
                              },
                              "before": {
                                "type": "string",
                                "description": "The full name of a thing to fetch before."
                              },
                              "count": {
                                "type": "integer",
                                "description": "The number of items already seen in this listing. Starts at 0."
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return in this slice of the listing."
                              },
                              "show": {
                                "type": "string",
                                "description": "Show specific content (e.g., 'all', 'given')."
                              },
                              "sr_detail": {
                                "type": "string",
                                "description": "Expand subreddit information."
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "A Reddit post",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          },
                          "subreddit": {
                            "type": "string"
                          },
                          "created_utc": {
                            "type": "number"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "A Reddit comment",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "body": {
                            "type": "string"
                          },
                          "post_id": {
                            "type": "string"
                          },
                          "subreddit": {
                            "type": "string"
                          },
                          "created_utc": {
                            "type": "number"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getSubredditInfo": {
      "post": {
        "operationId": "getSubredditInfo",
        "summary": "Retrieves information about a specific subreddit.",
        "description": "This function fetches detailed information about a given subreddit. It takes the subreddit name as input and returns an object containing various details about the subreddit. This can be useful for applications that need to display or analyze subreddit information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getSubredditInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the subreddit to retrieve information for",
                            "example": "AskReddit"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with subreddit information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the subreddit"
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the subreddit"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the subreddit"
                    },
                    "subscribers": {
                      "type": "integer",
                      "description": "The number of subscribers to the subreddit"
                    },
                    "created_utc": {
                      "type": "number",
                      "description": "The creation date of the subreddit in Unix timestamp format"
                    },
                    "public_description": {
                      "type": "string",
                      "description": "The public description of the subreddit"
                    },
                    "over18": {
                      "type": "boolean",
                      "description": "Whether the subreddit is marked as NSFW (Not Safe For Work)"
                    }
                  },
                  "required": [
                    "name",
                    "title",
                    "subscribers"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid subreddit name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subreddit not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the subreddit was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/searchSubreddit": {
      "post": {
        "operationId": "searchSubreddit",
        "summary": "Search for posts and content within a specific subreddit.",
        "description": "This function allows users to search for posts and other content within a specified subreddit. It provides various parameters for filtering and sorting the search results, including options for time period, sorting method, and pagination.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchSubreddit sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the subreddit to search within."
                          },
                          {
                            "type": "string",
                            "description": "The search query."
                          },
                          {
                            "type": "object",
                            "description": "Optional parameters for filtering and sorting the results.",
                            "properties": {
                              "after": {
                                "type": "string",
                                "description": "The full name of a thing to fetch after."
                              },
                              "before": {
                                "type": "string",
                                "description": "The full name of a thing to fetch before."
                              },
                              "count": {
                                "type": "number",
                                "description": "The number of items already seen in this listing. Starts at 0."
                              },
                              "limit": {
                                "type": "number",
                                "description": "The maximum number of items to return in this slice of the listing."
                              },
                              "show": {
                                "type": "string",
                                "description": "Show specific content (e.g., 'all', 'given')."
                              },
                              "sr_detail": {
                                "type": "string",
                                "description": "Expand subreddit information."
                              },
                              "sort": {
                                "type": "string",
                                "enum": [
                                  "relevance",
                                  "hot",
                                  "top",
                                  "new",
                                  "comments"
                                ],
                                "description": "The sorting method for the search results."
                              },
                              "t": {
                                "type": "string",
                                "enum": [
                                  "hour",
                                  "day",
                                  "week",
                                  "month",
                                  "year",
                                  "all"
                                ],
                                "description": "The time period to search within."
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the search result"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the post or content"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the post or content"
                      },
                      "created_utc": {
                        "type": "number",
                        "description": "Creation timestamp in UTC"
                      },
                      "score": {
                        "type": "number",
                        "description": "Score or upvotes of the post or content"
                      },
                      "url": {
                        "type": "string",
                        "description": "URL of the post or content"
                      },
                      "num_comments": {
                        "type": "number",
                        "description": "Number of comments on the post"
                      },
                      "subreddit": {
                        "type": "string",
                        "description": "Name of the subreddit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subreddit not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the subreddit was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "operationId": "search",
        "summary": "Search across all of Reddit for posts and other content.",
        "description": "This function allows users to search for content across all subreddits on Reddit. It provides various parameters for filtering and sorting the search results, including options for time periods and content types. The function returns an array of search results matching the specified criteria.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the search sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The search query"
                          },
                          {
                            "type": "object",
                            "description": "Optional parameters for filtering and sorting the results",
                            "properties": {
                              "after": {
                                "type": "string",
                                "description": "The full name of a thing to fetch after"
                              },
                              "before": {
                                "type": "string",
                                "description": "The full name of a thing to fetch before"
                              },
                              "count": {
                                "type": "integer",
                                "description": "The number of items already seen in this listing. Starts at 0"
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return in this slice of the listing"
                              },
                              "show": {
                                "type": "string",
                                "description": "Show specific content (e.g., 'all', 'given')"
                              },
                              "sr_detail": {
                                "type": "string",
                                "description": "Expand subreddit information"
                              },
                              "sort": {
                                "type": "string",
                                "enum": [
                                  "relevance",
                                  "hot",
                                  "top",
                                  "new",
                                  "comments"
                                ],
                                "description": "The sorting method for the search results"
                              },
                              "t": {
                                "type": "string",
                                "enum": [
                                  "hour",
                                  "day",
                                  "week",
                                  "month",
                                  "year",
                                  "all"
                                ],
                                "description": "The time period to search within"
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful search operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "SearchResult",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the search result"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the post or content"
                      },
                      "subreddit": {
                        "type": "string",
                        "description": "Name of the subreddit where the content was posted"
                      },
                      "author": {
                        "type": "string",
                        "description": "Username of the content author"
                      },
                      "created_utc": {
                        "type": "number",
                        "description": "UTC timestamp of when the content was created"
                      },
                      "score": {
                        "type": "integer",
                        "description": "Score or number of upvotes for the content"
                      },
                      "url": {
                        "type": "string",
                        "description": "URL of the content"
                      },
                      "num_comments": {
                        "type": "integer",
                        "description": "Number of comments on the post"
                      },
                      "selftext": {
                        "type": "string",
                        "description": "Text content of the post, if applicable"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating rate limit has been exceeded"
                    },
                    "retry_after": {
                      "type": "integer",
                      "description": "Number of seconds to wait before retrying the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/submitComment": {
      "post": {
        "operationId": "submitComment",
        "summary": "Submit a comment to a post or another comment.",
        "description": "This function allows users to add a new comment to an existing post or comment. It takes the parent ID and the comment text as input, and returns the newly created comment object. This enables interactive discussions and threaded conversations within the platform.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the submitComment sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the parent post or comment (e.g., 't3_12345')."
                          },
                          {
                            "type": "string",
                            "description": "The text of the comment."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the submitted comment"
                    },
                    "parentId": {
                      "type": "string",
                      "description": "The ID of the parent post or comment"
                    },
                    "text": {
                      "type": "string",
                      "description": "The text content of the comment"
                    },
                    "author": {
                      "type": "string",
                      "description": "The username of the comment author"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the comment was created"
                    }
                  },
                  "required": [
                    "id",
                    "parentId",
                    "text",
                    "author",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the reason for the bad request"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that authentication is required"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Parent post or comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the specified parent post or comment does not exist"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/submitPost": {
      "post": {
        "operationId": "submitPost",
        "summary": "Submits a new post to a specified subreddit.",
        "description": "This function creates a new text or link post in the specified subreddit. It allows users to submit either a text-based self post or a link post, depending on the content provided. The function returns the submitted post object upon successful creation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the submitPost sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the subreddit to submit to."
                          },
                          {
                            "type": "string",
                            "description": "The title of the post."
                          },
                          {
                            "type": "object",
                            "description": "The content of the post. Either 'text' or 'url' must be provided.",
                            "properties": {
                              "text": {
                                "type": "string",
                                "description": "The text content of a self post."
                              },
                              "url": {
                                "type": "string",
                                "description": "The URL of a link post."
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "text"
                                ]
                              },
                              {
                                "required": [
                                  "url"
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The submitted post object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the post"
                    },
                    "title": {
                      "type": "string",
                      "description": "Title of the post"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string",
                          "description": "Text content of the post (if it's a self post)"
                        },
                        "url": {
                          "type": "string",
                          "description": "URL of the post (if it's a link post)"
                        }
                      }
                    },
                    "subreddit": {
                      "type": "string",
                      "description": "Name of the subreddit where the post was submitted"
                    },
                    "author": {
                      "type": "string",
                      "description": "Username of the post author"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when the post was created"
                    }
                  },
                  "required": [
                    "id",
                    "title",
                    "content",
                    "subreddit",
                    "author",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permission to post in the subreddit"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vote": {
      "post": {
        "operationId": "vote",
        "summary": "Cast a vote on a post or comment.",
        "description": "This function allows users to vote on a post or comment by specifying the item's ID and the vote direction. It can be used to upvote, downvote, or remove a vote from a specific item on the platform.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the vote sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to vote on (e.g., 't3_12345')."
                          },
                          {
                            "type": "number",
                            "description": "The vote direction (1 for upvote, -1 for downvote, 0 to remove vote).",
                            "enum": [
                              1,
                              -1,
                              0
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote successfully cast",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the vote was successfully cast"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - the specified item does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the item was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deletePost": {
      "post": {
        "operationId": "deletePost",
        "summary": "Deletes a post or comment from Reddit.",
        "description": "This function removes a specified post or comment from Reddit. It takes a single parameter which is the full name of the item to be deleted. The function does not return any value upon successful deletion.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deletePost sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to delete (e.g., 't3_12345')",
                            "example": "t3_12345"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful deletion of the post or comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the deletion was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue",
                      "example": "Invalid item ID format"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have permission to delete the item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permission",
                      "example": "You do not have permission to delete this item"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - the specified post or comment does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the item was not found",
                      "example": "The specified post or comment does not exist"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error",
                      "example": "An unexpected error occurred while processing the request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/editUserText": {
      "post": {
        "operationId": "editUserText",
        "summary": "Edit the text content of a user's post or comment.",
        "description": "This function allows modification of the text content for an existing post or comment. It takes the full name identifier of the item to be edited and the new text content as input. The function returns the edited post or comment object after successful modification.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the editUserText sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to edit (e.g., 't3_12345')."
                          },
                          {
                            "type": "string",
                            "description": "The new text content."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The full name of the edited item"
                    },
                    "text": {
                      "type": "string",
                      "description": "The updated text content"
                    },
                    "author": {
                      "type": "string",
                      "description": "The username of the author"
                    },
                    "created_utc": {
                      "type": "number",
                      "description": "The creation timestamp in UTC"
                    },
                    "edited": {
                      "type": "number",
                      "description": "The edit timestamp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to edit the item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permission"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified item does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the item was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hidePost": {
      "post": {
        "operationId": "hidePost",
        "summary": "Hide a post or comment from the user's view.",
        "description": "This function hides a specified post or comment, removing it from the user's view. It takes a single parameter which is the full name identifier of the item to be hidden. The function does not return any value upon successful execution.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the hidePost sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "name": "id",
                            "in": "query",
                            "description": "The full name of the item to hide (e.g., 't3_12345')",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post or comment successfully hidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid item ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - item does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unhidePost": {
      "post": {
        "operationId": "unhidePost",
        "summary": "Unhides a previously hidden post or comment.",
        "description": "This function unhides a post or comment that was previously hidden. It takes the full name of the item as a parameter and makes it visible again. The function is useful for restoring content that a user may have accidentally or temporarily hidden.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the unhidePost sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to unhide (e.g., 't3_12345').",
                            "example": "t3_12345"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully unhidden the post or comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the unhide operation was successful.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The provided item ID is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request.",
                      "example": "Invalid item ID provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. The specified item does not exist or is not accessible.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the item was not found.",
                      "example": "The specified item does not exist or is not accessible."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. An unexpected error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error.",
                      "example": "An unexpected error occurred while processing the request."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/saveItem": {
      "post": {
        "operationId": "saveItem",
        "summary": "Save a post or comment for later viewing.",
        "description": "This function allows users to save a post or comment for future reference. It takes the full name of the item as a required parameter and optionally allows categorization of the saved item. The function does not return any value upon successful execution.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the saveItem sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to save (e.g., 't3_12345').",
                            "example": "t3_12345"
                          },
                          {
                            "type": "string",
                            "description": "An optional category to save the item under.",
                            "example": "Favorites"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the save operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue",
                      "example": "Invalid item ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the item was not found",
                      "example": "The specified item does not exist"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error",
                      "example": "An unexpected error occurred while saving the item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unsaveItem": {
      "post": {
        "operationId": "unsaveItem",
        "summary": "Unsaves a post or comment from the saved list.",
        "description": "This function removes a specified post or comment from the user's saved list. It takes a single parameter which is the full name identifier of the item to be unsaved. The function does not return any value upon successful execution.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the unsaveItem sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to unsave (e.g., 't3_12345').",
                            "example": "t3_12345"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully unsaved the item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the unsave operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue",
                      "example": "Invalid item ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the item was not found",
                      "example": "Item with the specified ID does not exist or is not saved"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error",
                      "example": "An unexpected error occurred while processing the request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reportItem": {
      "post": {
        "operationId": "reportItem",
        "summary": "Report a post or comment to Reddit moderators.",
        "description": "This function allows users to report a specific post or comment on Reddit to the platform's moderators. It takes the full name of the item to be reported and the reason for reporting. The function is used to flag content that may violate Reddit's rules or community guidelines.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reportItem sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the item to report (e.g., 't3_12345')."
                          },
                          {
                            "type": "string",
                            "description": "The reason for reporting the item."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully reported.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the report was successfully submitted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. User must be authenticated to report items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication is required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. The specified item does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the item was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getInfo": {
      "post": {
        "operationId": "getInfo",
        "summary": "Retrieves information about multiple Reddit items (posts, comments, or subreddits) by their IDs.",
        "description": "The getInfo function fetches data for multiple Reddit items simultaneously using their full names. It accepts an array of item IDs and returns an array of objects containing detailed information about the requested items. This function is useful for efficiently gathering data on various Reddit entities in a single API call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "An array of full names of items to retrieve (e.g., ['t3_12345', 't1_67890'])."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Post object"
                      },
                      {
                        "type": "object",
                        "description": "Comment object"
                      },
                      {
                        "type": "object",
                        "description": "Subreddit object"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - One or more requested items do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that one or more items were not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getMoreComments": {
      "post": {
        "operationId": "getMoreComments",
        "summary": "Retrieves additional comments for a specified post.",
        "description": "The getMoreComments function fetches additional comments that were not initially loaded in a post's comment tree. It takes the post's full name and an array of comment IDs as input, allowing for targeted retrieval of specific comments. This function is useful for implementing \"load more comments\" functionality in a Reddit-like application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getMoreComments sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the post (e.g., 't3_12345')"
                          },
                          {
                            "type": "array",
                            "description": "An array of comment IDs to retrieve",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Comment object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the comment"
                      },
                      "body": {
                        "type": "string",
                        "description": "The content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "The username of the comment author"
                      },
                      "created_utc": {
                        "type": "number",
                        "description": "The UTC timestamp of when the comment was created"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post or comments not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the post or comments were not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getPost": {
      "post": {
        "operationId": "getPost",
        "summary": "Retrieves a specific post by its ID.",
        "description": "This function fetches a single post from the system using its full name as the identifier. It allows users to retrieve detailed information about a specific post, which can be useful for displaying post content, analyzing post data, or performing operations on individual posts.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getPost sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The full name of the post to retrieve (e.g., 't3_12345').",
                            "example": "t3_12345"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "oauth2"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_ID"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_ID"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_CLIENT_SECRET"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_CLIENT_SECRET"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REDIRECT_URI"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REDIRECT_URI"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_ACCESS_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_ACCESS_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "REDDIT_REFRESH_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of REDDIT_REFRESH_TOKEN"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SCOPES"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SCOPES"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/reddit"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The requested post object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the post"
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the post"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the post"
                    },
                    "author": {
                      "type": "string",
                      "description": "The username of the post author"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The creation date and time of the post"
                    }
                  },
                  "required": [
                    "id",
                    "title",
                    "content",
                    "author",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid post ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Post with the given ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the post was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}