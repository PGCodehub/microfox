{
  "openapi": "3.0.1",
  "info": {
    "title": "Microfox Discord SDK API",
    "version": "1.0.0",
    "description": "Single entry-point API for all Microfox Discord SDK functions via a wrapper Lambda",
    "contact": {
      "name": "Microfox Dev Support",
      "email": "support@microfox.com"
    }
  },
  "servers": [
    {
      "url": "https://api.microfox.com/c/discord",
      "description": "Unified wrapper endpoint"
    }
  ],
  "paths": {
    "/sendMessage": {
      "post": {
        "operationId": "sendMessage",
        "summary": "Sends a message to a specified channel or user in Discord.",
        "description": "This function allows sending messages to either a specific channel or directly to a user in Discord. It supports sending text messages, embedding images/links, and including rich embeds with customizable properties.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the sendMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Message configuration object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "The text content of the message"
                              },
                              "userId": {
                                "type": "string",
                                "description": "The ID of the user to send a direct message to. If provided, channelId is ignored and a new DM channel is created"
                              },
                              "channelId": {
                                "type": "string",
                                "description": "The ID of the channel to send the message to. Required if userId is not provided"
                              },
                              "fileUrl": {
                                "type": "string",
                                "description": "A URL to an image or file to embed in the message. If provided, it will be displayed as an embed"
                              },
                              "embed": {
                                "type": "object",
                                "description": "A rich embed object to include in the message",
                                "properties": {
                                  "title": {
                                    "type": "string",
                                    "description": "The title of the embed"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "The description of the embed"
                                  },
                                  "color": {
                                    "type": "number",
                                    "description": "The color of the embed (decimal)"
                                  },
                                  "image": {
                                    "type": "string",
                                    "description": "A URL to an image to display in the embed"
                                  }
                                }
                              }
                            },
                            "required": []
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the sent message"
                    },
                    "content": {
                      "type": "string",
                      "description": "The text content of the sent message"
                    },
                    "channelId": {
                      "type": "string",
                      "description": "The ID of the channel where the message was sent"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the message was sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/editMessage": {
      "post": {
        "operationId": "editMessage",
        "summary": "Edits an existing message in a Discord channel, allowing modification of text content and embedded media.",
        "description": "The editMessage function updates the content of a previously sent message in a specified Discord channel. It allows for modification of both text content and embedded media, supporting the addition or replacement of image or file embeds. This function is useful for correcting mistakes, updating information, or enhancing messages with new media content.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the editMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel containing the message"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the message to edit"
                          },
                          {
                            "type": "string",
                            "description": "The new text content for the message"
                          },
                          {
                            "type": "string",
                            "description": "A new URL to an image or file to embed in the message (optional)",
                            "nullable": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully edited the message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the edited message"
                    },
                    "content": {
                      "type": "string",
                      "description": "The updated text content of the message"
                    },
                    "channelId": {
                      "type": "string",
                      "description": "The ID of the channel containing the message"
                    },
                    "embed": {
                      "type": "object",
                      "nullable": true,
                      "description": "The embedded media object, if present"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Internal server error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deleteMessage": {
      "post": {
        "operationId": "deleteMessage",
        "summary": "Deletes a specific message from a Discord channel.",
        "description": "The deleteMessage function removes a specified message from a given Discord channel. It takes two parameters: the channel ID and the message ID. This function returns a Promise that resolves when the message is successfully deleted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deleteMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel containing the message."
                          },
                          {
                            "type": "string",
                            "description": "The ID of the message to delete."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the message was successfully deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid channel ID or message ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fetchMessages": {
      "post": {
        "operationId": "fetchMessages",
        "summary": "Fetches recent messages from a specified Discord channel.",
        "description": "This function retrieves a specified number of messages from a channel's history in Discord. It allows fetching up to a certain limit of messages, defaulting to 10 if not specified. The function returns a Promise that resolves to an array of message objects.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchMessages sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to fetch messages from"
                          },
                          {
                            "type": "number",
                            "description": "The maximum number of messages to fetch (default is 10)",
                            "optional": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully fetched messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Message object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the message"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the message"
                      },
                      "author": {
                        "type": "object",
                        "description": "Author of the message",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "User ID of the author"
                          },
                          "username": {
                            "type": "string",
                            "description": "Username of the author"
                          }
                        }
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of when the message was sent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid channelId or limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reactToMessage": {
      "post": {
        "operationId": "reactToMessage",
        "summary": "Adds an emoji reaction to a specific message in a Discord channel.",
        "description": "The reactToMessage function allows users to add an emoji reaction to a specific message within a Discord channel. It takes the channel ID, message ID, and the desired emoji as parameters, supporting both Unicode emojis and custom emoji IDs. The function returns a Promise that resolves when the reaction is successfully added.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactToMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel containing the message"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the message to react to"
                          },
                          {
                            "type": "string",
                            "description": "The emoji to react with (can be a Unicode emoji or a custom emoji ID)"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction successfully added to the message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the reaction was successfully added"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/createThread": {
      "post": {
        "operationId": "createThread",
        "summary": "Creates a new thread in a Discord channel.",
        "description": "This function creates a thread within a specified Discord channel, branching off from a specific message. It allows users to start focused discussions on particular topics or messages within a channel, enhancing conversation organization.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createThread sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to create the thread in"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the message to create the thread from"
                          },
                          {
                            "type": "string",
                            "description": "The name of the new thread"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the created thread"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the created thread"
                    },
                    "parentId": {
                      "type": "string",
                      "description": "The ID of the parent channel"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "The ID of the thread creator"
                    },
                    "messageCount": {
                      "type": "integer",
                      "description": "The number of messages in the thread"
                    },
                    "memberCount": {
                      "type": "integer",
                      "description": "The number of members in the thread"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The creation timestamp of the thread"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "parentId",
                    "ownerId",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fetchGuildInfo": {
      "post": {
        "operationId": "fetchGuildInfo",
        "summary": "Generate OpenAPI specification for fetchGuildInfo function",
        "description": "Analyze the provided function documentation for fetchGuildInfo and create an OpenAPI specification. This includes generating a summary, description, arguments schema, and responses schema based on the given information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchGuildInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "summary": {
                                "type": "string",
                                "description": "One clear sentence describing what this function does"
                              },
                              "description": {
                                "type": "string",
                                "description": "2-3 sentences explaining the function's purpose and behavior"
                              },
                              "arguments": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "array"
                                    ],
                                    "description": "Type must be array"
                                  },
                                  "items": {
                                    "type": "array",
                                    "description": "Array of parameter schemas"
                                  }
                                },
                                "required": [
                                  "type",
                                  "items"
                                ]
                              },
                              "responses": {
                                "type": "object",
                                "description": "OpenAPI responses object"
                              }
                            },
                            "required": [
                              "summary",
                              "description",
                              "arguments",
                              "responses"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "arguments": {
                      "type": "object"
                    },
                    "responses": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/fetchUserInfo": {
      "post": {
        "operationId": "fetchUserInfo",
        "summary": "Execute fetchUserInfo function",
        "description": "Executes the fetchUserInfo function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchUserInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/registerSlashCommand": {
      "post": {
        "operationId": "registerSlashCommand",
        "summary": "Registers a slash command for a Discord bot in a specific guild.",
        "description": "This function creates and registers a new slash command for a Discord bot within a specified guild. It allows for the definition of command properties including name, description, options, and permissions, enabling customized interaction with users through the Discord interface.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the registerSlashCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild to register the command in"
                          },
                          {
                            "type": "object",
                            "description": "An object defining the command's properties",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the command"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the command"
                              },
                              "options": {
                                "type": "array",
                                "description": "An array of options for the command",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the option"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "The description of the option"
                                    },
                                    "type": {
                                      "type": "number",
                                      "description": "The type of the option (refer to Discord API documentation for option types)"
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether the option is required"
                                    },
                                    "choices": {
                                      "type": "array",
                                      "description": "An array of choices for the option",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the choice"
                                          },
                                          "value": {
                                            "type": [
                                              "string",
                                              "number"
                                            ],
                                            "description": "The value of the choice"
                                          }
                                        }
                                      }
                                    },
                                    "options": {
                                      "type": "array",
                                      "description": "Sub-options for subcommands",
                                      "items": {
                                        "$ref": "#/components/schemas/DiscordSlashCommandOptionSchema"
                                      }
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "description",
                                    "type"
                                  ]
                                }
                              },
                              "default_member_permissions": {
                                "type": "string",
                                "description": "Default permissions required to use the command"
                              },
                              "dm_permission": {
                                "type": "boolean",
                                "description": "Whether the command can be used in DMs"
                              }
                            },
                            "required": [
                              "name",
                              "description"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered the slash command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the registered command"
                    },
                    "application_id": {
                      "type": "string",
                      "description": "The ID of the application the command belongs to"
                    },
                    "guild_id": {
                      "type": "string",
                      "description": "The ID of the guild the command is registered in"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the command"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the command"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DiscordSlashCommandOptionSchema"
                      },
                      "description": "The options of the command"
                    },
                    "default_member_permissions": {
                      "type": "string",
                      "description": "Default permissions required to use the command"
                    },
                    "dm_permission": {
                      "type": "boolean",
                      "description": "Whether the command can be used in DMs"
                    },
                    "version": {
                      "type": "string",
                      "description": "The version of the command"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registerGlobalSlashCommand": {
      "post": {
        "operationId": "registerGlobalSlashCommand",
        "summary": "Execute registerGlobalSlashCommand function",
        "description": "Executes the registerGlobalSlashCommand function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the registerGlobalSlashCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/deleteSlashCommand": {
      "post": {
        "operationId": "deleteSlashCommand",
        "summary": "Deletes a slash command from a specific guild.",
        "description": "This function removes a previously registered slash command from a specified guild. It takes the guild ID and command ID as parameters and returns a Promise that resolves when the command is successfully deleted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deleteSlashCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild where the command is registered"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the command to delete"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Slash command successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the command was successfully deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid guild ID or command ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deleteGlobalSlashCommand": {
      "post": {
        "operationId": "deleteGlobalSlashCommand",
        "summary": "Execute deleteGlobalSlashCommand function",
        "description": "Executes the deleteGlobalSlashCommand function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deleteGlobalSlashCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/moderateUser": {
      "post": {
        "operationId": "moderateUser",
        "summary": "Performs a moderation action on a user in a Discord guild.",
        "description": "This function allows for various moderation actions on a user within a Discord guild, including banning, kicking, timing out, and warning users. It takes the guild ID, user ID, and a moderation action object as parameters. The function returns a Promise that resolves when the moderation action is complete.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the moderateUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild where the user is located"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to moderate"
                          },
                          {
                            "type": "object",
                            "description": "The moderation action to perform",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ban",
                                  "kick",
                                  "timeout",
                                  "warn"
                                ],
                                "description": "The type of moderation action"
                              },
                              "reason": {
                                "type": "string",
                                "description": "The reason for the moderation action"
                              },
                              "duration": {
                                "type": "number",
                                "description": "The duration of the timeout in milliseconds"
                              },
                              "delete_message_days": {
                                "type": "number",
                                "description": "The number of days of messages to delete (for bans)"
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful moderation action",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the moderation action was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message describing the result of the moderation action"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/createChannel": {
      "post": {
        "operationId": "createChannel",
        "summary": "Creates a new channel in a specified Discord guild.",
        "description": "This function adds a new channel to a specified Discord guild using the provided guild ID and channel data. It allows for customization of various channel properties such as name, type, permissions, and more. The function returns a Promise that resolves to the created channel object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild to create the channel in"
                          },
                          {
                            "type": "object",
                            "description": "The channel data object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The channel ID"
                              },
                              "type": {
                                "type": "number",
                                "description": "The channel type (refer to Discord API documentation for channel types)"
                              },
                              "name": {
                                "type": "string",
                                "description": "The channel name"
                              },
                              "topic": {
                                "type": "string",
                                "description": "The channel topic"
                              },
                              "nsfw": {
                                "type": "boolean",
                                "description": "Whether the channel is NSFW"
                              },
                              "parent_id": {
                                "type": "string",
                                "description": "The ID of the parent category"
                              },
                              "permission_overwrites": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The role or user ID"
                                    },
                                    "type": {
                                      "type": "number",
                                      "description": "The type (0 for role, 1 for user)"
                                    },
                                    "allow": {
                                      "type": "string",
                                      "description": "Allowed permissions"
                                    },
                                    "deny": {
                                      "type": "string",
                                      "description": "Denied permissions"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                },
                                "description": "Permission overwrites for the channel"
                              },
                              "rate_limit_per_user": {
                                "type": "number",
                                "description": "Slowmode rate limit"
                              },
                              "position": {
                                "type": "number",
                                "description": "Channel position"
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "name"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the created channel"
                    },
                    "type": {
                      "type": "number",
                      "description": "The type of the created channel"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the created channel"
                    },
                    "topic": {
                      "type": "string",
                      "description": "The topic of the created channel"
                    },
                    "nsfw": {
                      "type": "boolean",
                      "description": "Whether the created channel is NSFW"
                    },
                    "parent_id": {
                      "type": "string",
                      "description": "The ID of the parent category for the created channel"
                    },
                    "permission_overwrites": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The role or user ID"
                          },
                          "type": {
                            "type": "number",
                            "description": "The type (0 for role, 1 for user)"
                          },
                          "allow": {
                            "type": "string",
                            "description": "Allowed permissions"
                          },
                          "deny": {
                            "type": "string",
                            "description": "Denied permissions"
                          }
                        }
                      },
                      "description": "Permission overwrites for the created channel"
                    },
                    "rate_limit_per_user": {
                      "type": "number",
                      "description": "Slowmode rate limit for the created channel"
                    },
                    "position": {
                      "type": "number",
                      "description": "Position of the created channel"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updateChannel": {
      "post": {
        "operationId": "updateChannel",
        "summary": "Updates the settings of an existing Discord channel.",
        "description": "This function modifies the properties of an existing Discord channel. It takes the channel ID and a partial object containing the updated channel data, allowing for flexible updates to various channel settings.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the updateChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to update"
                          },
                          {
                            "type": "object",
                            "description": "The updated channel data (partial DiscordChannelSchema)",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The new name for the channel"
                              },
                              "nsfw": {
                                "type": "boolean",
                                "description": "Whether the channel is NSFW"
                              }
                            },
                            "additionalProperties": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The updated channel object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the updated channel"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the updated channel"
                    },
                    "nsfw": {
                      "type": "boolean",
                      "description": "Whether the channel is NSFW"
                    }
                  },
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deleteChannel": {
      "post": {
        "operationId": "deleteChannel",
        "summary": "Execute deleteChannel function",
        "description": "Executes the deleteChannel function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deleteChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/createRole": {
      "post": {
        "operationId": "createRole",
        "summary": "Creates a new role in a specified Discord guild.",
        "description": "This function adds a new role to a specified Discord guild using the provided role data. It allows customization of various role properties such as name, color, permissions, and position. The function returns a Promise that resolves to the created role object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createRole sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild to create the role in"
                          },
                          {
                            "type": "object",
                            "description": "The role data object containing role properties",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The role ID"
                              },
                              "name": {
                                "type": "string",
                                "description": "The role name"
                              },
                              "color": {
                                "type": "number",
                                "description": "The role color"
                              },
                              "hoist": {
                                "type": "boolean",
                                "description": "Whether the role is hoisted"
                              },
                              "position": {
                                "type": "number",
                                "description": "The role position"
                              },
                              "permissions": {
                                "type": "string",
                                "description": "The role permissions"
                              },
                              "mentionable": {
                                "type": "boolean",
                                "description": "Whether the role is mentionable"
                              },
                              "managed": {
                                "type": "boolean",
                                "description": "Whether the role is managed"
                              },
                              "description": {
                                "type": "string",
                                "description": "The role description (optional)"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "color",
                              "hoist",
                              "position",
                              "permissions",
                              "mentionable",
                              "managed"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The role ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The role name"
                    },
                    "color": {
                      "type": "number",
                      "description": "The role color"
                    },
                    "hoist": {
                      "type": "boolean",
                      "description": "Whether the role is hoisted"
                    },
                    "position": {
                      "type": "number",
                      "description": "The role position"
                    },
                    "permissions": {
                      "type": "string",
                      "description": "The role permissions"
                    },
                    "mentionable": {
                      "type": "boolean",
                      "description": "Whether the role is mentionable"
                    },
                    "managed": {
                      "type": "boolean",
                      "description": "Whether the role is managed"
                    },
                    "description": {
                      "type": "string",
                      "description": "The role description (if provided)"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "color",
                    "hoist",
                    "position",
                    "permissions",
                    "mentionable",
                    "managed"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updateRole": {
      "post": {
        "operationId": "updateRole",
        "summary": "Updates the settings of an existing role in a Discord guild.",
        "description": "The updateRole function modifies the properties of an existing role within a specified Discord guild. It allows for partial updates to the role's attributes, such as name and color, without requiring all fields to be specified. This function is useful for dynamically adjusting role properties based on server management needs.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the updateRole sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild containing the role"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the role to update"
                          },
                          {
                            "type": "object",
                            "description": "The updated role data (partial DiscordRoleSchema)",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The new name for the role"
                              },
                              "color": {
                                "type": "integer",
                                "description": "The new color for the role (as an integer)"
                              }
                            },
                            "additionalProperties": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The updated role object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the updated role"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the updated role"
                    },
                    "color": {
                      "type": "integer",
                      "description": "The color of the updated role"
                    }
                  },
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deleteRole": {
      "post": {
        "operationId": "deleteRole",
        "summary": "Deletes a role from a guild.",
        "description": "This function removes a specified role from a guild in Discord. It takes the guild ID and role ID as parameters and returns a Promise that resolves when the role is successfully deleted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deleteRole sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild containing the role"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the role to delete"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the role was successfully deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid guild ID or role ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addRoleToUser": {
      "post": {
        "operationId": "addRoleToUser",
        "summary": "Adds a specific role to a user in a Discord guild.",
        "description": "This function assigns a specified role to a user within a Discord guild. It takes the guild ID, user ID, and role ID as required parameters, with an optional reason for audit log purposes. The function returns a Promise that resolves when the role is successfully added to the user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the addRoleToUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild where the user and role are located"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to add the role to"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the role to add"
                          },
                          {
                            "type": "string",
                            "description": "The reason for adding the role (audit log purposes)",
                            "optional": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully added to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the role was successfully added"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/removeRoleFromUser": {
      "post": {
        "operationId": "removeRoleFromUser",
        "summary": "Removes a specific role from a user in a Discord guild.",
        "description": "This function revokes a specified role from a user within a Discord guild. It takes the guild ID, user ID, and role ID as required parameters, with an optional reason for audit log purposes. The function returns a Promise that resolves when the role is successfully removed.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the removeRoleFromUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild where the user and role are located"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to remove the role from"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the role to remove"
                          },
                          {
                            "type": "string",
                            "description": "The reason for removing the role (audit log purposes)",
                            "optional": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully removed from the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the role was successfully removed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fetchChannels": {
      "post": {
        "operationId": "fetchChannels",
        "summary": "Execute fetchChannels function",
        "description": "Executes the fetchChannels function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchChannels sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/fetchRoles": {
      "post": {
        "operationId": "fetchRoles",
        "summary": "Generate OpenAPI specification for fetchRoles function",
        "description": "Analyze the provided function documentation for fetchRoles and create an OpenAPI specification. This includes generating a summary, description, arguments structure, and responses schema based on the given information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchRoles sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "summary": {
                                "type": "string",
                                "description": "One clear sentence describing what this function does"
                              },
                              "description": {
                                "type": "string",
                                "description": "2-3 sentences explaining the function's purpose and behavior"
                              },
                              "arguments": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "array"
                                    ]
                                  },
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "items"
                                ]
                              },
                              "responses": {
                                "type": "object",
                                "properties": {
                                  "200": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      },
                                      "content": {
                                        "type": "object",
                                        "properties": {
                                          "application/json": {
                                            "type": "object",
                                            "properties": {
                                              "schema": {
                                                "type": "object"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "description",
                                      "content"
                                    ]
                                  },
                                  "400": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "description"
                                    ]
                                  },
                                  "500": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "description"
                                    ]
                                  }
                                },
                                "required": [
                                  "200",
                                  "400",
                                  "500"
                                ]
                              }
                            },
                            "required": [
                              "summary",
                              "description",
                              "arguments",
                              "responses"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "arguments": {
                      "type": "object"
                    },
                    "responses": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fetchSlashCommands": {
      "post": {
        "operationId": "fetchSlashCommands",
        "summary": "Generate OpenAPI specification for fetchSlashCommands function",
        "description": "Analyze the provided function documentation for fetchSlashCommands and generate an OpenAPI specification. This includes creating a summary, description, arguments structure, and responses schema based on the given information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchSlashCommands sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "summary": {
                                "type": "string",
                                "description": "One clear sentence describing what this function does"
                              },
                              "description": {
                                "type": "string",
                                "description": "2-3 sentences explaining the function's purpose and behavior"
                              },
                              "arguments": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "array"
                                    ]
                                  },
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "description"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "items"
                                ]
                              },
                              "responses": {
                                "type": "object",
                                "properties": {
                                  "200": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      },
                                      "content": {
                                        "type": "object",
                                        "properties": {
                                          "application/json": {
                                            "type": "object",
                                            "properties": {
                                              "schema": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "schema"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "application/json"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "description",
                                      "content"
                                    ]
                                  },
                                  "400": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "description"
                                    ]
                                  },
                                  "500": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "description"
                                    ]
                                  }
                                },
                                "required": [
                                  "200",
                                  "400",
                                  "500"
                                ]
                              }
                            },
                            "required": [
                              "summary",
                              "description",
                              "arguments",
                              "responses"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "arguments": {
                      "type": "object"
                    },
                    "responses": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/fetchGlobalSlashCommands": {
      "post": {
        "operationId": "fetchGlobalSlashCommands",
        "summary": "Execute fetchGlobalSlashCommands function",
        "description": "Executes the fetchGlobalSlashCommands function with provided parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the fetchGlobalSlashCommands sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "any",
                            "description": "Function parameters"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/registerCommand": {
      "post": {
        "operationId": "registerCommand",
        "summary": "Registers a function to handle a specific slash command in a Discord guild.",
        "description": "This function registers a command handler for a specific slash command in a Discord guild. It allows developers to define custom commands with names, descriptions, options, and handler functions. The function returns a Promise that resolves when the command is successfully registered.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the registerCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the guild to register the command in"
                          },
                          {
                            "type": "object",
                            "description": "The command handler data",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the command"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the command"
                              },
                              "options": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "DiscordSlashCommandOptionSchema"
                                },
                                "description": "An array of options for the command (same structure as in `registerSlashCommand`)"
                              },
                              "handler": {
                                "type": "object",
                                "description": "The function to handle the command interaction",
                                "properties": {
                                  "interaction": {
                                    "type": "object",
                                    "description": "The interaction object (DiscordSlashCommandInteractionSchema)"
                                  },
                                  "options": {
                                    "type": "object",
                                    "description": "An object containing the values of the command options"
                                  }
                                },
                                "required": [
                                  "interaction",
                                  "options"
                                ]
                              },
                              "default_member_permissions": {
                                "type": "string",
                                "description": "Default permissions required to use the command"
                              },
                              "dm_permission": {
                                "type": "boolean",
                                "description": "Whether the command can be used in DMs"
                              }
                            },
                            "required": [
                              "name",
                              "description",
                              "handler"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the command was successfully registered"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message confirming the registration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registerGlobalCommand": {
      "post": {
        "operationId": "registerGlobalCommand",
        "summary": "Registers a global slash command handler for Discord.",
        "description": "This function registers a handler for a specific global slash command in Discord. It takes a command object containing the command's name, description, and an async handler function. The function returns a Promise that resolves when the command is successfully registered.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the registerGlobalCommand sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "command": {
                                "type": "object",
                                "description": "The command handler data (same structure as in `registerCommand`).",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the global slash command"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A description of the global slash command"
                                  },
                                  "handler": {
                                    "type": "function",
                                    "description": "An async function to handle the command interaction"
                                  }
                                },
                                "required": [
                                  "name",
                                  "description",
                                  "handler"
                                ]
                              }
                            },
                            "required": [
                              "command"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered the global command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the command was successfully registered"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid command data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error occurred while registering the command",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/handleInteraction": {
      "post": {
        "operationId": "handleInteraction",
        "summary": "Handles a slash command interaction in a Discord bot.",
        "description": "This function is called when a user interacts with a slash command in a Discord bot. It retrieves the corresponding command handler for the interaction and executes it, managing the entire process of handling user-initiated slash commands.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the handleInteraction sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "The raw interaction object received from Discord",
                            "properties": {
                              "isChatInputCommand": {
                                "type": "function",
                                "description": "Function to check if the interaction is a chat input command"
                              }
                            },
                            "additionalProperties": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interaction handled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the interaction was handled successfully"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message describing the result of the interaction handling"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid interaction object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/respondToInteraction": {
      "post": {
        "operationId": "respondToInteraction",
        "summary": "Responds to a Discord slash command interaction with a customizable message.",
        "description": "This function sends a response back to the user who interacted with a Discord slash command. It allows for customization of the response content, including text, embeds, and interactive components, with an option to make the response ephemeral.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the respondToInteraction sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The interaction token received from Discord"
                          },
                          {
                            "type": "object",
                            "description": "The response data object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "The text content of the response"
                              },
                              "embeds": {
                                "type": "array",
                                "description": "An array of embed objects"
                              },
                              "components": {
                                "type": "array",
                                "description": "An array of component objects (buttons, menus, etc.)"
                              },
                              "ephemeral": {
                                "type": "boolean",
                                "description": "Whether the response should be ephemeral (only visible to the user who triggered the command)"
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully sent the response to the interaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the response was sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deferInteraction": {
      "post": {
        "operationId": "deferInteraction",
        "summary": "Defers a slash command response in Discord.",
        "description": "This function acknowledges a Discord slash command interaction and allows the bot more time to process the command. It takes an interaction token and an optional parameter to set the response as ephemeral. The function returns a Promise that resolves when the interaction is successfully deferred.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the deferInteraction sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The interaction token received from Discord"
                          },
                          {
                            "type": "boolean",
                            "description": "Whether the deferred response should be ephemeral",
                            "optional": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interaction successfully deferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the interaction was successfully deferred"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/followUpInteraction": {
      "post": {
        "operationId": "followUpInteraction",
        "summary": "Sends a follow-up message to a deferred Discord interaction.",
        "description": "The followUpInteraction function allows sending a message after an interaction has been deferred. It takes an interaction token and a response object as parameters. This function is useful for scenarios where the initial response to an interaction was delayed and a follow-up message needs to be sent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the followUpInteraction sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The interaction token received from Discord"
                          },
                          {
                            "type": "object",
                            "description": "The response data (same structure as in `respondToInteraction`)",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "The content of the follow-up message"
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "DISCORD_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of DISCORD_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "packageName": {
                        "type": "string",
                        "description": "@microfox/discord"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Follow-up message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the follow-up message was sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}